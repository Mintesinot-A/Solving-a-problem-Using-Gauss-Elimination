import numpy as np
import math

S = np.array([[1,0,0,-10],[-1,1,0,-4],[0,-1,1,-5],[0,0,1,6]])
C = np.full((4,1), 0) # c is a constant matrix.
m = np.array([10,4,5,6])
g = 9.82
angle = math.pi / 4
C[3] = m[3] * g
U = np.array([0.25,0.3,0.2]) # U is coefficient of friction
for i in range(3) :
    C[i] = m[i] * g * (math.sin(angle) - U[i] * math.cos(angle))

def Gauss(a,b):
    
    if np.size(a, axis=0) != np.size(a, axis=1):
        print('ERROR! The Coefficient Matrix you just entered is not a square matrix.')
        return

    if np.size(a, axis=0) != np.size(b):
        print('ERROR! The constant matrix you just entered can not match with coefficient matrix.')
        return
        
    n = len(b)
    a = np.concatenate((a,b), axis=1, dtype=float)
    #print(f'Augumented matrix : \n {a}')
    for c in range(0, n-1):
        for r in range(c+1, n):
        	if a[r,c] != 0 :
        	    a[r, c:] = a[r, c:] - (a[r, c] / a[c, c]) * a[c, c:]
        #print(f'Step {c+1} \n {a}')
    #Separating the Augumented matrix
    b = a[:, n]
    a = a[:n, :n]
    #print(f'The new coefficient matrix: \n {a}')
    #print(f'The new Constant matrix: \n {b}')
    # Back Substitution
    x = np.zeros((n))
    x[n-1] = b[n-1] / a[n-1, n-1]
    for i in range(n-2, -1, -1):
        x[i] = (b[i] - np.dot((a[i, i+1:n]), (x[i+1:]))) / a[i, i]
    #Printing the solutions
    for i in range(3):
        print(f'Tensions T{i+1} is: {x[i]} N.')
    print(f'The Acceleration of the system is: {x[3]} ms-2.')
    return 

Gauss(S,C)
